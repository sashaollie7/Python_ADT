from numpy import isin

from hw8 import ByteNode, LinkedListBinaryNum, DoublyLinkedNode, DoublyLinkedList, DoublyLinkedListQueue, NumsManagment

print('Node tests:')
#bn = ByteNode(10000000) #TypeError
#bn = ByteNode('100000001') #ValueError
#bn = ByteNode('10020001') #ValueError
bn = ByteNode('10011000')
print(bn.get_byte() == '10011000')
print(isinstance(bn.get_byte(), str))
print(bn.get_next() is None)
print(str(bn) == '[10011000]=>')

bn2 = ByteNode('11111111')
bn2.set_next(bn)
print(bn2.get_next().get_byte() == '10011000')

print('LinkedListBinaryNum tests:')
print(LinkedListBinaryNum(0).__repr__() == 'LinkedListBinaryNum with 1 Byte, Bytes map: [00000000]=>None')
print(LinkedListBinaryNum(255).__repr__() == 'LinkedListBinaryNum with 1 Byte, Bytes map: [11111111]=>None')
print(LinkedListBinaryNum(4294967296).__repr__() == 'LinkedListBinaryNum with 5 Bytes, Bytes map: [00000001]=>[00000000]=>[00000000]=>[00000000]=>[00000000]=>None')
print(LinkedListBinaryNum(0).__str__() == '|00000000|')
print(LinkedListBinaryNum(255).__str__() == '|11111111|')
print(LinkedListBinaryNum(4294967296).__str__() == '|00000001|00000000|00000000|00000000|00000000|')
print(len(LinkedListBinaryNum(4294967296)) == 5)
print(LinkedListBinaryNum(654321)[0] == '00001001')
print(LinkedListBinaryNum(654321)[-1] == '11110001')
bn1 = LinkedListBinaryNum(4294967296)
bn2 = LinkedListBinaryNum(4294967297)
print(not bn1 == bn2)
print(bn1 != bn2)
print(bn1 < bn2)
print(not bn1 >= bn2)
print(not bn1 > bn2)
print(bn1 <= bn2)
bn1 = LinkedListBinaryNum(254)
bn2 = LinkedListBinaryNum(255)
print(not bn1 == bn2)
print(bn1 != bn2)
print(bn1 < bn2)
print(not bn1 >= bn2)
print(not bn1 > bn2)
print(bn1 <= bn2)
print(str(LinkedListBinaryNum(1000000) + LinkedListBinaryNum(2000000)) == '|00101101|11000110|11000000|')
print(str(LinkedListBinaryNum(1000000) + 2000000) == '|00101101|11000110|11000000|')
print(str(1000000 + LinkedListBinaryNum(2000000)) == '|00101101|11000110|11000000|')
print(str(LinkedListBinaryNum(4294967297)-1) == '|00000001|00000000|00000000|00000000|00000000|')
print(str(LinkedListBinaryNum(510)-LinkedListBinaryNum(256)) == '|11111110|')

print('DoublyLinkedNode tests:')
dln1 = DoublyLinkedNode('1st')
print(str(dln1) == '=>[1st]<=')
print(dln1.get_data() == '1st')
dln2 = DoublyLinkedNode('2nd')
dln1.set_next(dln2)
dln2.set_prev(dln1)
print(str(dln1.get_prev()) == 'None')
print(str(dln1.get_next()) == '=>[2nd]<=')
print(str(dln2.get_prev()) == '=>[1st]<=')
print(str(dln2.get_next()) == 'None')

print('DoublyLinkedList tests:')
dll = DoublyLinkedList()
print(str(dll) == 'Head==><==Tail')
print(len(dll) == 0)
print(dll.is_empty() == True)
print(dll.get_head() is None)
print(dll.get_tail() is None)
dll.add_at_start('B')
dll.add_at_start(2)
dll.add_at_start('or not')
dll.add_at_start('B')
dll.add_at_start(2)
print(str(dll) == 'Head==>[2]<==>[B]<==>[or not]<==>[2]<==>[B]<==Tail')
print(dll.remove_from_end() == 'B')
print(str(dll) == 'Head==>[2]<==>[B]<==>[or not]<==>[2]<==Tail')

print('DoublyLinkedListQueue tests:')
q = DoublyLinkedListQueue()
print(str(q) == 'Newest=>[]<=Oldest')
print(len(q) == 0)
print(q.is_empty())
q.enqueue('you')
q.enqueue(4)
q.enqueue('queue')
print(str(q) == 'Newest=>[queue,4,you]<=Oldest')
print(len(q) == 3)
print(not q.is_empty())
print(q.dequeue() == 'you')
print(str(q) == 'Newest=>[queue,4]<=Oldest')
it = iter(q)
print(next(it) == 4)
print(next(it) == 'queue')
#next(it) #StopIteration

print('NumsManagment tests:')
nm = NumsManagment('nums_in_memory.txt')
gen = nm.read_file_gen()
print(str(type(gen)) == "<class 'generator'>")
print(str(next(gen)) == '|00100011|10000101|10100010|11000011|10010100|01101011|')
print(str(next(gen)) == '|00000011|01111110|')
s = nm.stack_from_file()
print(str(s) == '[|00100011|10000101|10100010|11000011|10010100|01101011|,|00000011|01111110|,|00010001|11010111|,|00010101|01011011|,|00000110|11111000|00011110|,|00000110|,|10000111|00000011|,|00110101|,|00000001|11000101|,|00101101|,|00000001|01011010|,|00010101|01100011|,|01000001|,|11111010|,|00000001|00000000|]<=Top')
s = nm.sort_stack_descending(nm.stack_from_file())
print(str(s) == '[|00000110|,|00101101|,|00110101|,|01000001|,|11111010|,|00000001|00000000|,|00000001|01011010|,|00000001|11000101|,|00000011|01111110|,|00010001|11010111|,|00010101|01011011|,|00010101|01100011|,|10000111|00000011|,|00000110|11111000|00011110|,|00100011|10000101|10100010|11000011|10010100|01101011|]<=Top')
q = nm.queue_from_file()
q.enqueue(LinkedListBinaryNum(17))
q.enqueue(LinkedListBinaryNum(3))
bytes_set = nm.set_of_bytes(q)
print(isinstance(bytes_set, set))
print(str(sorted(bytes_set)) == "['00000000', '00000001', '00000011', '00000110', '00010001', '00010101', '00011110', '00100011', '00101101', '00110101', '01000001', '01011010', '01011011', '01100011', '01101011', '01111110', '10000101', '10000111', '10010100', '10100010', '11000011', '11000101', '11010111', '11111000', '11111010']")
bst = nm.nums_bst()
print(str(bst) == "(6,|00000110|)\n(45,|00101101|)\n(53,|00110101|)\n(65,|01000001|)\n(250,|11111010|)\n(256,|00000001|00000000|)\n(346,|00000001|01011010|)\n(453,|00000001|11000101|)\n(894,|00000011|01111110|)\n(4567,|00010001|11010111|)\n(5467,|00010101|01011011|)\n(5475,|00010101|01100011|)\n(34563,|10000111|00000011|)\n(456734,|00000110|11111000|00011110|)\n(39056868349035,|00100011|10000101|10100010|11000011|10010100|01101011|)\n")
gen = nm.bst_closest_gen(bst)
st = ''
for num in gen:
    st += '(' + str(num[0]) + ',' + str(num[1]) + ')'
print(st == '(250,|11111010|)(251,|11111011|)(252,|11111100|)(253,|11111101|)(254,|11111110|)(255,|11111111|)(256,|00000001|00000000|)')

